//
//  CreateOrderViewController.swift
//  ClearStore
//
//  Created by Lucio Pham on 11/13/17.
//  Copyright (c) 2017 Lucio Pham. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CreateOrderDisplayLogic: class
{
  func displayExpirationDate(viewModel: CreateOrder.FormatExpirationDate.ViewModel)
}

class CreateOrderViewController: UITableViewController, CreateOrderDisplayLogic
{
  
  @IBOutlet var userInformationTextField: [UITextField]!
  @IBOutlet weak var shippingMethodTextField: UITextField!
  @IBOutlet var shippingMethodPicker: UIPickerView!
  
  @IBOutlet weak var expirationDateTextField: UITextField!
  @IBOutlet var expirationDatePicker: UIDatePicker!
  
  var interactor: CreateOrderBusinessLogic?
  var router: (NSObjectProtocol & CreateOrderRoutingLogic & CreateOrderDataPassing)?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = CreateOrderInteractor()
    let presenter = CreateOrderPresenter()
    let router = CreateOrderRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  private func setupDelegateDatasource() {
    _ = userInformationTextField.map { $0.delegate = self }
    expirationDateTextField.delegate = self
    shippingMethodTextField.delegate = self
    shippingMethodPicker.delegate = self
    shippingMethodPicker.dataSource = self
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    setupDelegateDatasource()
    configurePicker()
  }
  
  // MARK: Do something
  func configurePicker() {
    shippingMethodTextField.inputView = shippingMethodPicker
    expirationDateTextField.inputView = expirationDatePicker
  }
  
  
  // Input for ViewController - Output of Presenter
  func displayExpirationDate(viewModel: CreateOrder.FormatExpirationDate.ViewModel) {
    expirationDateTextField.text = viewModel.date
  }
  
  //Outputs of ViewController - Inputs for Interactor
  @IBAction func expirationDatePickerValueChanged(_ sender: UIDatePicker) {
    let date = expirationDatePicker.date
    let request = CreateOrder.FormatExpirationDate.Request(date: date)
    interactor?.formatExpirationDate(request: request)
  }
}

// MARK: TableView Delegate

extension CreateOrderViewController {
  override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
    if let cell = tableView.cellForRow(at: indexPath) {
      for textField in userInformationTextField {
        if textField.isDescendant(of: cell) {
          textField.becomeFirstResponder()
        }
      }
    }
  }
}

// MARK: Textfield Delegate

extension CreateOrderViewController: UITextFieldDelegate {
  func textFieldShouldReturn(_ textField: UITextField) -> Bool {
    textField.resignFirstResponder()
    if let index = userInformationTextField.index(of: textField) {
      if index < userInformationTextField.count - 1 {
        let nextTextField = userInformationTextField[index + 1]
        nextTextField.becomeFirstResponder()
      }
    }
    return true
  }
}

// MARK: PickerView Delegate & Datasource

extension CreateOrderViewController: UIPickerViewDataSource {
  func numberOfComponents(in pickerView: UIPickerView) -> Int {
    return 1
  }
  
  func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {
    return interactor?.shippingMethods.count ?? 0
  }
  
  func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {
    return interactor?.shippingMethods[row]
  }
  
}

extension CreateOrderViewController: UIPickerViewDelegate {
  func pickerView(_ pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) {
    shippingMethodTextField.text = interactor?.shippingMethods[row]
  }
}

